(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),p=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},d=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(o,".").concat(d)]||u[d]||b[d]||a;return n?s.a.createElement(h,i(i({ref:t},l),{},{components:n})):s.a.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<a;l++)o[l]=n[l];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),s=n(7),a=(n(0),n(103)),o={id:"herbs2gql",title:"Herbs2gql",sidebar_label:"Herbs2gql",slug:"/glues/herbs2gql"},i={unversionedId:"glues/herbs2gql",id:"glues/herbs2gql",isDocsHomePage:!1,title:"Herbs2gql",description:"herbs2gql creates GraphQL types based on herbs entities (gotu) and usecases (buchu), based on Apollo GraphQL.",source:"@site/docs/glues/herbs2gql.md",slug:"/glues/herbs2gql",permalink:"/docs/glues/herbs2gql",editUrl:"https://github.com/herbsjs/herbsjs.github.io/docs/glues/herbs2gql.md",version:"current",sidebar_label:"Herbs2gql",sidebar:"sidebar",previous:{title:"\u2800\u2800\u2800",permalink:"/docs/glues"},next:{title:"Herbs2knex",permalink:"/docs/glues/Herbs2knex"}},c=[{value:"Getting started",id:"getting-started",children:[{value:"Installing",id:"installing",children:[]},{value:"Using",id:"using",children:[]}]},{value:"Features",id:"features",children:[{value:"GraphQL Type",id:"graphql-type",children:[]},{value:"GraphQL Input",id:"graphql-input",children:[]},{value:"GraphQL Query",id:"graphql-query",children:[]},{value:"GraphQL Mutation",id:"graphql-mutation",children:[]},{value:"GraphQL Subscription",id:"graphql-subscription",children:[]},{value:"Custom Names or Conventions",id:"custom-names-or-conventions",children:[]}]},{value:"Contribute",id:"contribute",children:[]},{value:"License",id:"license",children:[]}],l={toc:c};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"herbs2gql creates GraphQL types based on herbs entities (",Object(a.b)("a",{parentName:"p",href:"https://github.com/herbsjs/gotu"},"gotu"),") and usecases (",Object(a.b)("a",{parentName:"p",href:"https://github.com/herbsjs/buchu"},"buchu"),"), based on ",Object(a.b)("a",{parentName:"p",href:"https://www.apollographql.com/"},"Apollo")," GraphQL."),Object(a.b)("h2",{id:"getting-started"},"Getting started"),Object(a.b)("h3",{id:"installing"},"Installing"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"$ npm install herbs2gql\n")),Object(a.b)("h3",{id:"using"},"Using"),Object(a.b)("p",null,"All methods returns a string in GraphQL format representing the type based (",Object(a.b)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/api/apollo-server/#gql"},"gql"),") and a ",Object(a.b)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/data/resolvers/"},"resolver")," (when expected)."),Object(a.b)("p",null,"// Add a complete and simple example here"),Object(a.b)("h2",{id:"features"},"Features"),Object(a.b)("h3",{id:"graphql-type"},"GraphQL Type"),Object(a.b)("p",null,"To convert a Herbs Entity to GraphQL Type:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const entity = entity('User', {\n    id: field(String),\n    name: field(String),\n    document: field(String),\n    age: field(Number),\n    active: field(Boolean),\n})\n\nconst gql = entity2type(entity)\n")),Object(a.b)("h3",{id:"graphql-input"},"GraphQL Input"),Object(a.b)("p",null,"To convert a Herbs Entity to GraphQL Input:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const entity = entity('UserFilter', {    \n    name: field(String),    \n    age: field(Number),    \n})\n\nconst gql = entity2input(entity)\n")),Object(a.b)("h3",{id:"graphql-query"},"GraphQL Query"),Object(a.b)("p",null,"To convert a Herbs Use Case to GraphQL Query:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const usecase = usecase('Get User', {\n    request: {\n        id: Number,\n        document: String\n    },\n\n    response: User\n})\n\nconst resolverFunc = (parent, args, context, info) => { }\n\nconst [gql, resolver] = usecase2query(usecase, resolverFunc)\n")),Object(a.b)("h3",{id:"graphql-mutation"},"GraphQL Mutation"),Object(a.b)("p",null,"To convert a Herbs Use Case to GraphQL Mutation:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const usecase = usecase('Update User', {\n    request: {\n        id: Number,\n        name: String,\n        age: Number,\n        active: Boolean\n    },\n\n    response: User\n})\n\nconst resolverFunc = (parent, args, context, info) => { }\n\nconst [gql, resolver] = usecase2mutation(usecase, resolverFunc)\n")),Object(a.b)("h3",{id:"graphql-subscription"},"GraphQL Subscription"),Object(a.b)("p",null,"To convert a Herbs Use Case to GraphQL Subscription:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const usecase = usecase('New User Notification', {\n    request: {\n        id: Number,        \n    },\n\n    response: UserMessage\n})\n\nconst resolverFunc = () => { }\n\nconst [gql, resolver] = usecase2subscription(usecase, resolverFunc)\n")),Object(a.b)("h3",{id:"custom-names-or-conventions"},"Custom Names or Conventions"),Object(a.b)("p",null,"In Herbs it is possible to include personalized names for queries, mutations, inputs and types\ncustom names are always prioritized"),Object(a.b)("h4",{id:"custom-names"},"Custom Names"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const options = { inputName: 'An-Entity' }\n\n// for entity2input\nconst gql = entity2input(givenAnInput, options)\n\n// for entity2type\nconst gql = entity2type(givenAnEntity, options)\n\n//for mutation, query or subscription example using mutation\nconst [gql, resolver] = usecase2mutation(givenAnUseCase, resolverFunc, options)\n")),Object(a.b)("h4",{id:"conventions"},"Conventions"),Object(a.b)("p",null,"At the convention, a function must be sent, it must return a text formatted according to the sended convention"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const options = { convention: { inputNameRule: (str) => `snake_case_returned` }}\n\n// for entity2input\nconst gql = entity2input(givenAnInput, options)\n\n// for entity2type\nconst gql = entity2type(givenAnEntity, options)\n\n//for mutation, query or subscription example using mutation\nconst [gql, resolver] = usecase2mutation(givenAnUseCase, resolverFunc, options)\n")),Object(a.b)("h4",{id:"example"},"Example"),Object(a.b)("p",null,"Additionally you can view a simple demo application of this library in ",Object(a.b)("a",{parentName:"p",href:"https://github.com/herbsjs/todolist-on-herbs"},"todolist-on-herbs"),"."),Object(a.b)("h2",{id:"contribute"},"Contribute"),Object(a.b)("p",null,"Come with us to make an awesome ",Object(a.b)("em",{parentName:"p"},"herbs2gql"),"."),Object(a.b)("p",null,"Now, if you do not have the technical knowledge and also have intended to help us, do not feel shy, ",Object(a.b)("a",{parentName:"p",href:"https://github.com/herbsjs/herbs2gql/issues"},"click here")," to open an issue and collaborate their ideas, the contribution may be a criticism or a compliment (why not?)"),Object(a.b)("p",null,"If you would like to help contribute to this repository, please see ",Object(a.b)("a",{parentName:"p",href:"https://github.com/herbsjs/herbs2gql/blob/main/.github/CONTRIBUTING.md"},"CONTRIBUTING")),Object(a.b)("h2",{id:"license"},"License"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"herbsshelf")," is released under the\n",Object(a.b)("a",{parentName:"p",href:"https://github.com/herbsjs/herbs2gql/blob/main/LICENSE.md"},"MIT license")))}p.isMDXComponent=!0}}]);