(self.webpackChunkherbjs=self.webpackChunkherbjs||[]).push([[532],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return y}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),y=i,m=c["".concat(o,".").concat(y)]||c[y]||d[y]||r;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},73729:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return o},default:function(){return u}});var a=n(22122),i=n(19756),r=(n(67294),n(3905)),l={id:"features",title:"Features",sidebar_label:"Features",slug:"/entity/features"},s={unversionedId:"entity/features",id:"entity/features",isDocsHomePage:!1,title:"Features",description:"// WIP",source:"@site/docs/entity/features.md",sourceDirName:"entity",slug:"/entity/features",permalink:"/docs/entity/features",editUrl:"https://github.com/herbsjs/herbsjs.github.io/docs/entity/features.md",version:"current",sidebar_label:"Features",frontMatter:{id:"features",title:"Features",sidebar_label:"Features",slug:"/entity/features"},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/docs/entity/getting-started"},next:{title:"Field Validations",permalink:"/docs/entity/validation"}},o=[{value:"Creating an Entity",id:"creating-an-entity",children:[]},{value:"Fields",id:"fields",children:[{value:"Scalar types",id:"scalar-types",children:[]},{value:"Entity type",id:"entity-type",children:[]},{value:"Array field type",id:"array-field-type",children:[]},{value:"Default value",id:"default-value",children:[]}]},{value:"Methods",id:"methods",children:[]},{value:"Validation",id:"validation",children:[{value:"Type Validation",id:"type-validation",children:[]},{value:"Custom Validation",id:"custom-validation",children:[]}]},{value:"Serialization",id:"serialization",children:[{value:"fromJSON(value)",id:"fromjsonvalue",children:[]},{value:"JSON.stringify(entity)",id:"jsonstringifyentity",children:[]}]},{value:"Instance Type Check - Entity.parentOf",id:"instance-type-check---entityparentof",children:[]},{value:"Entity Type Check - entity.isEntity",id:"entity-type-check---entityisentity",children:[]}],p={toc:o};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"// WIP"),(0,r.kt)("h2",{id:"creating-an-entity"},"Creating an Entity"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"entity(name, body)"),", where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name"),": name of the entity.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"body"),": object containing the entity structure: fields and methods.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"return: a Herbs entity class."))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { entity, field } = require('gotu')\n\nconst Customer = \n    entity('Customer', {\n        id: field(Number),\n        name: field(String),\n        isVIP() {\n            ...\n        }\n    })\n\nconst aCustomer = new Customer()\n")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("p",null,"Defines the fields (properties) of an entity."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"field(type, options)"),", where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"type"),": a scalar (JavaScript) type or a custom type."),(0,r.kt)("p",{parentName:"li"},"  Ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"field(String)"),". "),(0,r.kt)("p",{parentName:"li"},"  In order to define a field that holds an array instead of a single value use ",(0,r.kt)("inlineCode",{parentName:"p"},"[type]"),". "),(0,r.kt)("p",{parentName:"li"},"  Ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"field([String])"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"options"),": defines the field options (ex: validations, default value, etc). "),(0,r.kt)("p",{parentName:"li"},"  Ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"field(Number, { validation: { presence: true } })"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"return: a entity field definition instance."))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Order = \n    entity('Order', {\n    id: field(Number, {\n        validation: { presence: true, length: { minimum: 3 } }\n    }),\n    date: field(Date),\n    items: field([OrderItems]),\n    ...\n})\n")),(0,r.kt)("h3",{id:"scalar-types"},"Scalar types"),(0,r.kt)("p",null,"A field in an entity can be of basic types, the same as those used by JavaScript:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Number"),": double-precision 64-bit binary format IEEE 754 value"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String"),": a UTF\u201016 character sequence"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Boolean"),": true or false"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Date"),": represents a single moment in time in a platform-independent format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const User = \n    entity('User', {\n        name: field(String),\n        lastAccess: field(Date),\n        accessCount: field(Number),\n        hasAccess: field(Boolean)\n    })\n")),(0,r.kt)("h3",{id:"entity-type"},"Entity type"),(0,r.kt)("p",null,"For complex types, with deep relationship between entities, a field can be of entity type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Plan = \n    entity('Plan', {\n        ...\n        monthlyCost: field(Number),\n    })\n\nconst User = entity('User', {\n        ...\n        plan: field(Plan)\n    })\n")),(0,r.kt)("h3",{id:"array-field-type"},"Array field type"),(0,r.kt)("p",null,"In order to define a field that holds an array instead of a single value use ",(0,r.kt)("inlineCode",{parentName:"p"},"field([String])"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Post =\n    entity('Post', {\n        ...\n        tags: field(String)\n    })\n")),(0,r.kt)("p",null,"For complex types, with deep relationship between entities, a field can contain a list of entity type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Plan = \n    entity('Plan', {\n        ...\n        monthlyCost: field(Number),\n    })\n\nconst User = \n    entity('User', {\n        ...\n        plans: field([Plan])\n    })\n")),(0,r.kt)("h3",{id:"default-value"},"Default value"),(0,r.kt)("p",null,"It is possible to define a default value when an entity instance is initiate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const User = \n    entity('User', {\n        ...\n        hasAccess: field(Boolean, { default: false })\n    })\n\n\nconst user = new User()\nuser.hasAccess // false\n")),(0,r.kt)("p",null,"If the default value is a ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," it will call the function and return the value as default value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const User = \n    entity('User', {\n        ...\n        hasAccess: field(Boolean, { default: () => false })\n    })\n\n\nconst user = new User()\nuser.hasAccess // false\n")),(0,r.kt)("p",null,"When not specified, the default value (for scalar and entity types) is ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("p",null,"For reference types (like arrays) you ",(0,r.kt)("strong",{parentName:"p"},"must")," use functions in order to create a new object for every instance."),(0,r.kt)("p",null,"\u274c Wrong: ",(0,r.kt)("inlineCode",{parentName:"p"},"items: field([Item], { default: [] })")),(0,r.kt)("p",null,"\u2705 Right:  ",(0,r.kt)("inlineCode",{parentName:"p"},"items: field([Item], { default: () => [] })")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"Defines the methods (actions) of an entity."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const User =\n    entity(\'User\', {\n        ...\n        role: field(String),\n        hasAccess() { return this.role === "admin" },\n    })\n\nconst aUser = new User()\naUser.role = "admin"\nconst canAccess = aUser.hasAccess()\n')),(0,r.kt)("h2",{id:"validation"},"Validation"),(0,r.kt)("p",null,"The values of an entity fields can be validated against the fields types or its custom validations."),(0,r.kt)("h3",{id:"type-validation"},"Type Validation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst Plan = \n    entity('Plan', {\n        ...\n        monthlyCost: field(Number),\n    })\n\nconst User = \n    entity('User', {\n        name: field(String),\n        plan: field(Plan)\n    })\n\nconst user = new User()\nuser.name = 42\nuser.plan.monthlyCost = true\nuser.validate() \nuser.errors // { name: [ wrongType: 'String' ], plan: { monthlyCost: [ wrongType: 'Number' ] } }\nuser.isValid() // false\n")),(0,r.kt)("p",null,"You can also simplify you validation method using ",(0,r.kt)("inlineCode",{parentName:"p"},"isValid()")," method that execute validate for you entity and return true/false in a single execution."),(0,r.kt)("h3",{id:"custom-validation"},"Custom Validation"),(0,r.kt)("p",null,"For custom validation Gotu uses Herbs JS ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/herbsjs/suma"},"Suma")," library under the hood. It has no message defined, only error codes."),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"{ validation: ... }")," to specify a valid Suma validation (sorry) on the field definition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const User = \n    entity('User', {\n        ...\n        password: field(String, validation: { \n            presence: true, \n            length: { minimum: 6 }\n        })\n    })\n\nconst user = new User()\nuser.password = '1234'\nuser.validate() \nuser.errors // { password: [ { isTooShort: 6 } ] }\nuser.isValid // false\n")),(0,r.kt)("h2",{id:"serialization"},"Serialization"),(0,r.kt)("h3",{id:"fromjsonvalue"},"fromJSON(value)"),(0,r.kt)("p",null,"Returns a new instance of a entity"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const User = \n    entity('User', {\n        name: field(String)\n    })\n\n// from object\nconst user = User.fromJSON({ name: 'Beth'})\n// or string\nconst user = User.fromJSON(`{ \"name\": \"Beth\"}`)\n")),(0,r.kt)("p",null,"By default ",(0,r.kt)("inlineCode",{parentName:"p"},"fromJSON")," serializes only keys that have been defined in the entity. If you want to add other keys during serialization, use ",(0,r.kt)("inlineCode",{parentName:"p"},".fromJSON(data, { allowExtraKeys: true })"),"."),(0,r.kt)("h3",{id:"jsonstringifyentity"},"JSON.stringify(entity)"),(0,r.kt)("p",null,"To serialize an entity to JSON string use ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON.stringify")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"entity.toJSON")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const json = JSON.stringify(user) // { "name": "Beth" }\n')),(0,r.kt)("p",null,"By default ",(0,r.kt)("inlineCode",{parentName:"p"},"toJSON")," serializes only keys that have been defined in the entity. If you want to add other keys during serialization, use ",(0,r.kt)("inlineCode",{parentName:"p"},"entity.toJSON({ allowExtraKeys: true })"),"."),(0,r.kt)("h2",{id:"instance-type-check---entityparentof"},"Instance Type Check - Entity.parentOf"),(0,r.kt)("p",null,"Check if a instance is the same type from its parent entity class (similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceOf"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"        const AnEntity = entity('A entity', {})\n        const AnSecondEntity = entity('A second entity', {})\n\n        const instance1 = new AnEntity()\n        const instance2 = new AnSecondEntity()\n        \n        AnEntity.parentOf(instance1) // true\n        AnEntity.parentOf(instance2) // false\n")),(0,r.kt)("h2",{id:"entity-type-check---entityisentity"},"Entity Type Check - entity.isEntity"),(0,r.kt)("p",null,"Check if an object is a Gotu Entity class"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"        const AnEntity = entity('A entity', {})\n\n        const instance1 = new AnEntity()\n        \n        entity.isEntity(AnEntity) // true\n        entity.isEntity(Object) // false\n")))}u.isMDXComponent=!0}}]);